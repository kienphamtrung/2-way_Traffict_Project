/*
 * scheduler.c
 *
 *  Created on: Nov 12, 2022
 *      Author: Admin
 */

#include "scheduler.h"
#include <stdint.h>


typedef struct{
	void (*pTask)(void);
	uint32_t 	Delay;
	uint32_t 	Period;
	uint8_t 	RunMe;

	uint32_t 	TaskID;
}sTasks;

#define SCH_MAX_TASKS	40

sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;

void SCH_Add_Task ( void (*pFunction)() , uint32_t DELAY, uint32_t PERIOD){
	if(current_index_task < SCH_MAX_TASKS){

		SCH_tasks_G[current_index_task].pTask = pFunction;
		SCH_tasks_G[current_index_task].Delay = DELAY;
		SCH_tasks_G[current_index_task].Period =  PERIOD;
		SCH_tasks_G[current_index_task].RunMe = 0;

		SCH_tasks_G[current_index_task].TaskID = current_index_task;


		current_index_task++;
	}
}

void SCH_Dispatch_Tasks(void){
	for(int i = 0; i < current_index_task; i++){
		if(SCH_tasks_G[i].RunMe > 0){
			SCH_tasks_G[i].RunMe--;
			(*SCH_tasks_G[i].pTask)();
		}
	}
}

void SCH_Update(void){
	for(int i = 0; i < current_index_task; i++){
		if (SCH_tasks_G[i].Delay > 0){
			SCH_tasks_G[i].Delay --;
		}else{
			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
			SCH_tasks_G[i].RunMe += 1;
		}
	}
}

unsigned char SCH_Delete_Task ( const tBy te TASK_INDEX) {
3 unsigned char Return_code ;
4 i f ( SCH_tasks_G [TASK_INDEX ] . pTask == 0 ) {
5 // No task a t t hi s loca tion . . .
6 //
7 // Set the global e r ro r v a ri abl e
8 Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK
9
10 // . . . also return an e r ro r code
11 Return_code = RETURN_ERROR;
12 } el s e {
13 Return_code = RETURN_NORMAL;
14 }
15 SCH_tasks_G [TASK_INDEX ] . pTask = 0x0000 ;
16 SCH_tasks_G [TASK_INDEX ] . Delay = 0;
17 SCH_tasks_G [TASK_INDEX ] . Period = 0;
18 SCH_tasks_G [TASK_INDEX ] .RunMe = 0;
19 return Return_code ; // return s t a tus

